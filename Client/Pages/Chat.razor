@page "/chat"
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@using MyChat.Shared

<div class="top-row px-4">
    <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
</div>

<div class="content px-4">
    <div id="scrollbox">
        @foreach (var item in messages) {
            <div class="@item.CSS">
                <div class="msg">@item.Body</div>
                <div class="description">@item.ToString()</div>
            </div>
        }

        <hr />
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <textarea class="input-lg" placeholder="Enter your message" @bind="@newMessage"></textarea>
                </div>
                <div class="col-md-12 text-md-right">
                    <button class="btn btn-sm btn-success" @onclick="@SendAsync">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code  {
    string username = string.Empty;
    string message = string.Empty;
    string newMessage = string.Empty;

    ChatClient client = null;
    List<Message> messages = new List<Message>();

    protected override async Task OnInitializedAsync() {
        string baseUrl = navigationManager.BaseUri;
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity.Name;

        messages.Clear();

        client = new ChatClient(authState.User.Identity.Name, baseUrl);
        client.MessageReceived += MessageReceived;

        await client.StartAsync();
    }

    private void MessageReceived(object sender, MessageReceivedEventArgs e) {
        bool isMine = false;

        if (!string.IsNullOrWhiteSpace(e.Username))
            isMine = string.Equals(e.Username, username, StringComparison.CurrentCultureIgnoreCase);

        messages.Add(new Message(e.Username, e.Message, isMine));

        StateHasChanged();
    }

    private async Task DisconnectAsync() {
        await client.StopAsync();
        navigationManager.NavigateTo("/");
    }

    private async Task SendAsync() {
        if (!string.IsNullOrWhiteSpace(newMessage))
            await client.SendAsync(newMessage);
    }
}
